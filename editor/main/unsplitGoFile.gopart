func unsplitGoFile(filename string) {
	baseDir := filepath.Join("editor", strings.TrimSuffix(filename, ".go"))
	
	// Check if the directory exists
	if _, err := os.Stat(baseDir); os.IsNotExist(err) {
		log.Fatalf("Directory %s does not exist. Make sure you've split the file first.", baseDir)
	}

	// Read all .gopart files
	files, err := ioutil.ReadDir(baseDir)
	if err != nil {
		log.Fatalf("Error reading directory %s: %v", baseDir, err)
	}

	var parts []string
	for _, file := range files {
		if filepath.Ext(file.Name()) == ".gopart" {
			content, err := ioutil.ReadFile(filepath.Join(baseDir, file.Name()))
			if err != nil {
				log.Fatalf("Error reading file %s: %v", file.Name(), err)
			}
			parts = append(parts, string(content))
		}
	}

	// Sort the parts to ensure correct order
	sort.Slice(parts, func(i, j int) bool {
		order := map[string]int{"package": 0, "import": 1, "var": 2, "const": 3, "type": 4, "func": 5}
		for keyword, priority := range order {
			if strings.HasPrefix(strings.TrimSpace(parts[i]), keyword) {
				return priority < order[getFirstKeyword(parts[j])]
			}
			if strings.HasPrefix(strings.TrimSpace(parts[j]), keyword) {
				return order[getFirstKeyword(parts[i])] < priority
			}
		}
		return false
	})

	// Combine the parts
	combinedContent := strings.Join(parts, "\n\n")

	// Write the combined content to the original .go file
	err = ioutil.WriteFile(filename, []byte(combinedContent), 0644)
	if err != nil {
		log.Fatalf("Error writing file %s: %v", filename, err)
	}

	fmt.Printf("Recreated %s from .gopart files in %s\n", filename, baseDir)
}
